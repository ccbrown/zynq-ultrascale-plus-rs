// This file was automatically generated. Don't edit it directly!
use tock_registers::registers::{Aliased, ReadOnly};
/// Serializer/Deserializer Configuration, SerDes Configuration
pub static mut SERDES: *mut Registers = 0xfd400000 as *mut Registers;
#[repr(C)]
pub struct Registers {
    _padding0: [u8; 52],
    /// Register value is generated by Vivado PCW.
    pub l0_tx_ana_tm_13: Aliased<u32, L0TxAnaTm13R::Register, L0TxAnaTm13W::Register>,
    _padding56: [u8; 4],
    /// Override for TX Swing, enable for rx detection and enable for rx detection charge and discharge
    pub l0_tx_ana_tm_15: Aliased<u32, L0TxAnaTm15R::Register, L0TxAnaTm15W::Register>,
    /// Override for TX margin
    pub l0_tx_ana_tm_16: Aliased<u32, L0TxAnaTm16R::Register, L0TxAnaTm16W::Register>,
    _padding68: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l0_tx_ana_tm_18: Aliased<u32, L0TxAnaTm18R::Register, L0TxAnaTm18W::Register>,
    _padding76: [u8; 392],
    /// Register value is generated by Vivado PCW.
    pub l0_tx_ana_tm_117: Aliased<u32, L0TxAnaTm117R::Register, L0TxAnaTm117W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tx_ana_tm_118: Aliased<u32, L0TxAnaTm118R::Register, L0TxAnaTm118W::Register>,
    _padding476: [u8; 2340],
    /// Register value is generated by Vivado PCW.
    pub l0_txpma_st_0: ReadOnly<u32, L0TxpmaSt0::Register>,
    _padding2820: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l0_txpma_st_3: ReadOnly<u32, L0TxpmaSt3::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_txpma_st_4: ReadOnly<u32, L0TxpmaSt4::Register>,
    _padding2836: [u8; 416],
    /// Register value is generated by Vivado PCW.
    pub l0_txpmd_tm_45: Aliased<u32, L0TxpmdTm45R::Register, L0TxpmdTm45W::Register>,
    _padding3256: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l0_txpmd_tm_48: Aliased<u32, L0TxpmdTm48R::Register, L0TxpmdTm48W::Register>,
    _padding3268: [u8; 872],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ana_byp_12: Aliased<u32, L0TmAnaByp12R::Register, L0TmAnaByp12W::Register>,
    _padding4144: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ana_byp_15: Aliased<u32, L0TmAnaByp15R::Register, L0TmAnaByp15W::Register>,
    _padding4156: [u8; 48],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_dig_6: Aliased<u32, L0TmDig6R::Register, L0TmDig6W::Register>,
    _padding4208: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_dig_8: Aliased<u32, L0TmDig8R::Register, L0TmDig8W::Register>,
    _padding4216: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_dig_10: Aliased<u32, L0TmDig10R::Register, L0TmDig10W::Register>,
    _padding4224: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_dig_21: Aliased<u32, L0TmDig21R::Register, L0TmDig21W::Register>,
    _padding4268: [u8; 32],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_aux_0: Aliased<u32, L0TmAux0R::Register, L0TmAux0W::Register>,
    _padding4304: [u8; 1992],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_misc1: Aliased<u32, L0TmMisc1R::Register, L0TmMisc1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_misc2: Aliased<u32, L0TmMisc2R::Register, L0TmMisc2W::Register>,
    _padding6304: [u8; 88],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_iq_ill1: Aliased<u32, L0TmIqIll1R::Register, L0TmIqIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_iq_ill2: Aliased<u32, L0TmIqIll2R::Register, L0TmIqIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_iq_ill3: Aliased<u32, L0TmIqIll3R::Register, L0TmIqIll3W::Register>,
    _padding6404: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_iq_ill8: Aliased<u32, L0TmIqIll8R::Register, L0TmIqIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_iq_ill9: Aliased<u32, L0TmIqIll9R::Register, L0TmIqIll9W::Register>,
    _padding6428: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_e_ill1: Aliased<u32, L0TmEIll1R::Register, L0TmEIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_e_ill2: Aliased<u32, L0TmEIll2R::Register, L0TmEIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_e_ill3: Aliased<u32, L0TmEIll3R::Register, L0TmEIll3W::Register>,
    _padding6448: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_e_ill8: Aliased<u32, L0TmEIll8R::Register, L0TmEIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_e_ill9: Aliased<u32, L0TmEIll9R::Register, L0TmEIll9W::Register>,
    _padding6472: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_eq0: Aliased<u32, L0TmEq0R::Register, L0TmEq0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_eq1: Aliased<u32, L0TmEq1R::Register, L0TmEq1W::Register>,
    _padding6484: [u8; 44],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ill8: Aliased<u32, L0TmIll8R::Register, L0TmIll8W::Register>,
    _padding6532: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ill11: Aliased<u32, L0TmIll11R::Register, L0TmIll11W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ill12: Aliased<u32, L0TmIll12R::Register, L0TmIll12W::Register>,
    _padding6548: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_rst_dly: Aliased<u32, L0TmRstDlyR::Register, L0TmRstDlyW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_tm_ill15: Aliased<u32, L0TmIll15R::Register, L0TmIll15W::Register>,
    _padding6572: [u8; 616],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_cdr5: Aliased<u32, L0TmCdr5R::Register, L0TmCdr5W::Register>,
    _padding7192: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_cdr16: Aliased<u32, L0TmCdr16R::Register, L0TmCdr16W::Register>,
    _padding7236: [u8; 1104],
    /// Register value is generated by Vivado PCW.
    pub l0_tm_pll_dig_37: Aliased<u32, L0TmPllDig37R::Register, L0TmPllDig37W::Register>,
    _padding8344: [u8; 712],
    /// Register value is generated by Vivado PCW.
    pub l0_pll_fbdiv_frac_3_msb:
        Aliased<u32, L0PllFbdivFrac3MsbR::Register, L0PllFbdivFrac3MsbW::Register>,
    _padding9060: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_steps_0_lsb:
        Aliased<u32, L0PllSsSteps0LsbR::Register, L0PllSsSteps0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_steps_1_msb:
        Aliased<u32, L0PllSsSteps1MsbR::Register, L0PllSsSteps1MsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_step_size_0_lsb:
        Aliased<u32, L0PllSsStepSize0LsbR::Register, L0PllSsStepSize0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_step_size_1:
        Aliased<u32, L0PllSsStepSize1R::Register, L0PllSsStepSize1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_step_size_2:
        Aliased<u32, L0PllSsStepSize2R::Register, L0PllSsStepSize2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_pll_ss_step_size_3_msb:
        Aliased<u32, L0PllSsStepSize3MsbR::Register, L0PllSsStepSize3MsbW::Register>,
    _padding9088: [u8; 100],
    /// Register value is generated by Vivado PCW.
    pub l0_pll_status_read_1: ReadOnly<u32, L0PllStatusRead1::Register>,
    _padding9192: [u8; 1144],
    /// Register value is generated by Vivado PCW.
    pub l0_l0_ref_clk_sel: Aliased<u32, L0L0RefClkSelR::Register, L0L0RefClkSelW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_l1_ref_clk_sel: Aliased<u32, L0L1RefClkSelR::Register, L0L1RefClkSelW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_l2_ref_clk_sel: Aliased<u32, L0L2RefClkSelR::Register, L0L2RefClkSelW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l0_l3_ref_clk_sel: Aliased<u32, L0L3RefClkSelR::Register, L0L3RefClkSelW::Register>,
    _padding10352: [u8; 6084],
    /// Register value is generated by Vivado PCW.
    pub l1_tx_ana_tm_13: Aliased<u32, L1TxAnaTm13R::Register, L1TxAnaTm13W::Register>,
    _padding16440: [u8; 4],
    /// Override for TX Swing, enable for rx detection and enable for rx detection charge and discharge
    pub l1_tx_ana_tm_15: Aliased<u32, L1TxAnaTm15R::Register, L1TxAnaTm15W::Register>,
    /// Override for TX margin
    pub l1_tx_ana_tm_16: Aliased<u32, L1TxAnaTm16R::Register, L1TxAnaTm16W::Register>,
    _padding16452: [u8; 4],
    /// public
    pub l1_tx_ana_tm_18: Aliased<u32, L1TxAnaTm18R::Register, L1TxAnaTm18W::Register>,
    _padding16460: [u8; 392],
    /// Register value is generated by Vivado PCW.
    pub l1_tx_ana_tm_117: Aliased<u32, L1TxAnaTm117R::Register, L1TxAnaTm117W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tx_ana_tm_118: Aliased<u32, L1TxAnaTm118R::Register, L1TxAnaTm118W::Register>,
    _padding16860: [u8; 2340],
    /// Register value is generated by Vivado PCW.
    pub l1_txpma_st_0: ReadOnly<u32, L1TxpmaSt0::Register>,
    _padding19204: [u8; 12],
    /// Register value is generated by Vivado PCW.
    pub l1_txpma_st_4: ReadOnly<u32, L1TxpmaSt4::Register>,
    _padding19220: [u8; 416],
    /// Register value is generated by Vivado PCW.
    pub l1_txpmd_tm_45: Aliased<u32, L1TxpmdTm45R::Register, L1TxpmdTm45W::Register>,
    _padding19640: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l1_txpmd_tm_48: Aliased<u32, L1TxpmdTm48R::Register, L1TxpmdTm48W::Register>,
    _padding19652: [u8; 872],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ana_byp_12: Aliased<u32, L1TmAnaByp12R::Register, L1TmAnaByp12W::Register>,
    _padding20528: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ana_byp_15: Aliased<u32, L1TmAnaByp15R::Register, L1TmAnaByp15W::Register>,
    _padding20540: [u8; 48],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_dig_6: Aliased<u32, L1TmDig6R::Register, L1TmDig6W::Register>,
    _padding20592: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_dig_8: Aliased<u32, L1TmDig8R::Register, L1TmDig8W::Register>,
    _padding20600: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_dig_10: Aliased<u32, L1TmDig10R::Register, L1TmDig10W::Register>,
    _padding20608: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_dig_21: Aliased<u32, L1TmDig21R::Register, L1TmDig21W::Register>,
    _padding20652: [u8; 32],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_aux_0: Aliased<u32, L1TmAux0R::Register, L1TmAux0W::Register>,
    _padding20688: [u8; 1992],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_misc1: Aliased<u32, L1TmMisc1R::Register, L1TmMisc1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_misc2: Aliased<u32, L1TmMisc2R::Register, L1TmMisc2W::Register>,
    _padding22688: [u8; 88],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_iq_ill1: Aliased<u32, L1TmIqIll1R::Register, L1TmIqIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_iq_ill2: Aliased<u32, L1TmIqIll2R::Register, L1TmIqIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_iq_ill3: Aliased<u32, L1TmIqIll3R::Register, L1TmIqIll3W::Register>,
    _padding22788: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_iq_ill8: Aliased<u32, L1TmIqIll8R::Register, L1TmIqIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_iq_ill9: Aliased<u32, L1TmIqIll9R::Register, L1TmIqIll9W::Register>,
    _padding22812: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_e_ill1: Aliased<u32, L1TmEIll1R::Register, L1TmEIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_e_ill2: Aliased<u32, L1TmEIll2R::Register, L1TmEIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_e_ill3: Aliased<u32, L1TmEIll3R::Register, L1TmEIll3W::Register>,
    _padding22832: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_e_ill8: Aliased<u32, L1TmEIll8R::Register, L1TmEIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_e_ill9: Aliased<u32, L1TmEIll9R::Register, L1TmEIll9W::Register>,
    _padding22856: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_eq0: Aliased<u32, L1TmEq0R::Register, L1TmEq0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_eq1: Aliased<u32, L1TmEq1R::Register, L1TmEq1W::Register>,
    _padding22868: [u8; 44],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ill8: Aliased<u32, L1TmIll8R::Register, L1TmIll8W::Register>,
    _padding22916: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ill11: Aliased<u32, L1TmIll11R::Register, L1TmIll11W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ill12: Aliased<u32, L1TmIll12R::Register, L1TmIll12W::Register>,
    _padding22932: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_rst_dly: Aliased<u32, L1TmRstDlyR::Register, L1TmRstDlyW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_tm_ill15: Aliased<u32, L1TmIll15R::Register, L1TmIll15W::Register>,
    _padding22956: [u8; 616],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_cdr5: Aliased<u32, L1TmCdr5R::Register, L1TmCdr5W::Register>,
    _padding23576: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_cdr16: Aliased<u32, L1TmCdr16R::Register, L1TmCdr16W::Register>,
    _padding23620: [u8; 1104],
    /// Register value is generated by Vivado PCW.
    pub l1_tm_pll_dig_37: Aliased<u32, L1TmPllDig37R::Register, L1TmPllDig37W::Register>,
    _padding24728: [u8; 712],
    /// Register value is generated by Vivado PCW.
    pub l1_pll_fbdiv_frac_3_msb:
        Aliased<u32, L1PllFbdivFrac3MsbR::Register, L1PllFbdivFrac3MsbW::Register>,
    _padding25444: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_steps_0_lsb:
        Aliased<u32, L1PllSsSteps0LsbR::Register, L1PllSsSteps0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_steps_1_msb:
        Aliased<u32, L1PllSsSteps1MsbR::Register, L1PllSsSteps1MsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_step_size_0_lsb:
        Aliased<u32, L1PllSsStepSize0LsbR::Register, L1PllSsStepSize0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_step_size_1:
        Aliased<u32, L1PllSsStepSize1R::Register, L1PllSsStepSize1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_step_size_2:
        Aliased<u32, L1PllSsStepSize2R::Register, L1PllSsStepSize2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l1_pll_ss_step_size_3_msb:
        Aliased<u32, L1PllSsStepSize3MsbR::Register, L1PllSsStepSize3MsbW::Register>,
    _padding25472: [u8; 100],
    /// Register value is generated by Vivado PCW.
    pub l1_pll_status_read_1: ReadOnly<u32, L1PllStatusRead1::Register>,
    _padding25576: [u8; 7244],
    /// Register value is generated by Vivado PCW.
    pub l2_tx_ana_tm_13: Aliased<u32, L2TxAnaTm13R::Register, L2TxAnaTm13W::Register>,
    _padding32824: [u8; 4],
    /// Override for TX Swing, enable for rx detection and enable for rx detection charge and discharge
    pub l2_tx_ana_tm_15: Aliased<u32, L2TxAnaTm15R::Register, L2TxAnaTm15W::Register>,
    /// Override for TX margin
    pub l2_tx_ana_tm_16: Aliased<u32, L2TxAnaTm16R::Register, L2TxAnaTm16W::Register>,
    _padding32836: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l2_tx_ana_tm_18: Aliased<u32, L2TxAnaTm18R::Register, L2TxAnaTm18W::Register>,
    _padding32844: [u8; 392],
    /// Register value is generated by Vivado PCW.
    pub l2_tx_ana_tm_117: Aliased<u32, L2TxAnaTm117R::Register, L2TxAnaTm117W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tx_ana_tm_118: Aliased<u32, L2TxAnaTm118R::Register, L2TxAnaTm118W::Register>,
    _padding33244: [u8; 2340],
    /// Register value is generated by Vivado PCW.
    pub l2_txpma_st_0: ReadOnly<u32, L2TxpmaSt0::Register>,
    _padding35588: [u8; 12],
    /// Register value is generated by Vivado PCW.
    pub l2_txpma_st_4: ReadOnly<u32, L2TxpmaSt4::Register>,
    _padding35604: [u8; 416],
    /// Register value is generated by Vivado PCW.
    pub l2_txpmd_tm_45: Aliased<u32, L2TxpmdTm45R::Register, L2TxpmdTm45W::Register>,
    _padding36024: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l2_txpmd_tm_48: Aliased<u32, L2TxpmdTm48R::Register, L2TxpmdTm48W::Register>,
    _padding36036: [u8; 872],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ana_byp_12: Aliased<u32, L2TmAnaByp12R::Register, L2TmAnaByp12W::Register>,
    _padding36912: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ana_byp_15: Aliased<u32, L2TmAnaByp15R::Register, L2TmAnaByp15W::Register>,
    _padding36924: [u8; 48],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_dig_6: Aliased<u32, L2TmDig6R::Register, L2TmDig6W::Register>,
    _padding36976: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_dig_8: Aliased<u32, L2TmDig8R::Register, L2TmDig8W::Register>,
    _padding36984: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_dig_10: Aliased<u32, L2TmDig10R::Register, L2TmDig10W::Register>,
    _padding36992: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_dig_21: Aliased<u32, L2TmDig21R::Register, L2TmDig21W::Register>,
    _padding37036: [u8; 32],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_aux_0: Aliased<u32, L2TmAux0R::Register, L2TmAux0W::Register>,
    _padding37072: [u8; 1992],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_misc1: Aliased<u32, L2TmMisc1R::Register, L2TmMisc1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_misc2: Aliased<u32, L2TmMisc2R::Register, L2TmMisc2W::Register>,
    _padding39072: [u8; 88],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_iq_ill1: Aliased<u32, L2TmIqIll1R::Register, L2TmIqIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_iq_ill2: Aliased<u32, L2TmIqIll2R::Register, L2TmIqIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_iq_ill3: Aliased<u32, L2TmIqIll3R::Register, L2TmIqIll3W::Register>,
    _padding39172: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_iq_ill8: Aliased<u32, L2TmIqIll8R::Register, L2TmIqIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_iq_ill9: Aliased<u32, L2TmIqIll9R::Register, L2TmIqIll9W::Register>,
    _padding39196: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_e_ill1: Aliased<u32, L2TmEIll1R::Register, L2TmEIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_e_ill2: Aliased<u32, L2TmEIll2R::Register, L2TmEIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_e_ill3: Aliased<u32, L2TmEIll3R::Register, L2TmEIll3W::Register>,
    _padding39216: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_e_ill8: Aliased<u32, L2TmEIll8R::Register, L2TmEIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_e_ill9: Aliased<u32, L2TmEIll9R::Register, L2TmEIll9W::Register>,
    _padding39240: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_eq0: Aliased<u32, L2TmEq0R::Register, L2TmEq0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_eq1: Aliased<u32, L2TmEq1R::Register, L2TmEq1W::Register>,
    _padding39252: [u8; 44],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ill8: Aliased<u32, L2TmIll8R::Register, L2TmIll8W::Register>,
    _padding39300: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ill11: Aliased<u32, L2TmIll11R::Register, L2TmIll11W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ill12: Aliased<u32, L2TmIll12R::Register, L2TmIll12W::Register>,
    _padding39316: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_rst_dly: Aliased<u32, L2TmRstDlyR::Register, L2TmRstDlyW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_tm_ill15: Aliased<u32, L2TmIll15R::Register, L2TmIll15W::Register>,
    _padding39340: [u8; 616],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_cdr5: Aliased<u32, L2TmCdr5R::Register, L2TmCdr5W::Register>,
    _padding39960: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_cdr16: Aliased<u32, L2TmCdr16R::Register, L2TmCdr16W::Register>,
    _padding40004: [u8; 1104],
    /// Register value is generated by Vivado PCW.
    pub l2_tm_pll_dig_37: Aliased<u32, L2TmPllDig37R::Register, L2TmPllDig37W::Register>,
    _padding41112: [u8; 712],
    /// Register value is generated by Vivado PCW.
    pub l2_pll_fbdiv_frac_3_msb:
        Aliased<u32, L2PllFbdivFrac3MsbR::Register, L2PllFbdivFrac3MsbW::Register>,
    _padding41828: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_steps_0_lsb:
        Aliased<u32, L2PllSsSteps0LsbR::Register, L2PllSsSteps0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_steps_1_msb:
        Aliased<u32, L2PllSsSteps1MsbR::Register, L2PllSsSteps1MsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_step_size_0_lsb:
        Aliased<u32, L2PllSsStepSize0LsbR::Register, L2PllSsStepSize0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_step_size_1:
        Aliased<u32, L2PllSsStepSize1R::Register, L2PllSsStepSize1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_step_size_2:
        Aliased<u32, L2PllSsStepSize2R::Register, L2PllSsStepSize2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l2_pll_ss_step_size_3_msb:
        Aliased<u32, L2PllSsStepSize3MsbR::Register, L2PllSsStepSize3MsbW::Register>,
    _padding41856: [u8; 100],
    /// Register value is generated by Vivado PCW.
    pub l2_pll_status_read_1: ReadOnly<u32, L2PllStatusRead1::Register>,
    _padding41960: [u8; 7244],
    /// Register value is generated by Vivado PCW.
    pub l3_tx_ana_tm_13: Aliased<u32, L3TxAnaTm13R::Register, L3TxAnaTm13W::Register>,
    _padding49208: [u8; 4],
    /// Override for TX Swing, enable for rx detection and enable for rx detection charge and discharge
    pub l3_tx_ana_tm_15: Aliased<u32, L3TxAnaTm15R::Register, L3TxAnaTm15W::Register>,
    /// Override for TX margin
    pub l3_tx_ana_tm_16: Aliased<u32, L3TxAnaTm16R::Register, L3TxAnaTm16W::Register>,
    _padding49220: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_tx_ana_tm_18: Aliased<u32, L3TxAnaTm18R::Register, L3TxAnaTm18W::Register>,
    _padding49228: [u8; 392],
    /// Register value is generated by Vivado PCW.
    pub l3_tx_ana_tm_117: Aliased<u32, L3TxAnaTm117R::Register, L3TxAnaTm117W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tx_ana_tm_118: Aliased<u32, L3TxAnaTm118R::Register, L3TxAnaTm118W::Register>,
    _padding49628: [u8; 2340],
    /// Register value is generated by Vivado PCW.
    pub l3_txpma_st_0: ReadOnly<u32, L3TxpmaSt0::Register>,
    _padding51972: [u8; 12],
    /// Register value is generated by Vivado PCW.
    pub l3_txpma_st_4: ReadOnly<u32, L3TxpmaSt4::Register>,
    _padding51988: [u8; 416],
    /// Register value is generated by Vivado PCW.
    pub l3_txpmd_tm_45: Aliased<u32, L3TxpmdTm45R::Register, L3TxpmdTm45W::Register>,
    _padding52408: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l3_txpmd_tm_48: Aliased<u32, L3TxpmdTm48R::Register, L3TxpmdTm48W::Register>,
    _padding52420: [u8; 872],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ana_byp_12: Aliased<u32, L3TmAnaByp12R::Register, L3TmAnaByp12W::Register>,
    _padding53296: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ana_byp_15: Aliased<u32, L3TmAnaByp15R::Register, L3TmAnaByp15W::Register>,
    _padding53308: [u8; 48],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_dig_6: Aliased<u32, L3TmDig6R::Register, L3TmDig6W::Register>,
    _padding53360: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_dig_8: Aliased<u32, L3TmDig8R::Register, L3TmDig8W::Register>,
    _padding53368: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_dig_10: Aliased<u32, L3TmDig10R::Register, L3TmDig10W::Register>,
    _padding53376: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_dig_21: Aliased<u32, L3TmDig21R::Register, L3TmDig21W::Register>,
    _padding53420: [u8; 32],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_aux_0: Aliased<u32, L3TmAux0R::Register, L3TmAux0W::Register>,
    _padding53456: [u8; 1992],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_misc1: Aliased<u32, L3TmMisc1R::Register, L3TmMisc1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_misc2: Aliased<u32, L3TmMisc2R::Register, L3TmMisc2W::Register>,
    _padding55456: [u8; 88],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_iq_ill1: Aliased<u32, L3TmIqIll1R::Register, L3TmIqIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_iq_ill2: Aliased<u32, L3TmIqIll2R::Register, L3TmIqIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_iq_ill3: Aliased<u32, L3TmIqIll3R::Register, L3TmIqIll3W::Register>,
    _padding55556: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_iq_ill8: Aliased<u32, L3TmIqIll8R::Register, L3TmIqIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_iq_ill9: Aliased<u32, L3TmIqIll9R::Register, L3TmIqIll9W::Register>,
    _padding55580: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_e_ill1: Aliased<u32, L3TmEIll1R::Register, L3TmEIll1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_e_ill2: Aliased<u32, L3TmEIll2R::Register, L3TmEIll2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_e_ill3: Aliased<u32, L3TmEIll3R::Register, L3TmEIll3W::Register>,
    _padding55600: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_e_ill8: Aliased<u32, L3TmEIll8R::Register, L3TmEIll8W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_e_ill9: Aliased<u32, L3TmEIll9R::Register, L3TmEIll9W::Register>,
    _padding55624: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_eq0: Aliased<u32, L3TmEq0R::Register, L3TmEq0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_eq1: Aliased<u32, L3TmEq1R::Register, L3TmEq1W::Register>,
    _padding55636: [u8; 44],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ill8: Aliased<u32, L3TmIll8R::Register, L3TmIll8W::Register>,
    _padding55684: [u8; 8],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ill11: Aliased<u32, L3TmIll11R::Register, L3TmIll11W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ill12: Aliased<u32, L3TmIll12R::Register, L3TmIll12W::Register>,
    _padding55700: [u8; 16],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_rst_dly: Aliased<u32, L3TmRstDlyR::Register, L3TmRstDlyW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_ill15: Aliased<u32, L3TmIll15R::Register, L3TmIll15W::Register>,
    _padding55724: [u8; 616],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_cdr5: Aliased<u32, L3TmCdr5R::Register, L3TmCdr5W::Register>,
    _padding56344: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_cdr16: Aliased<u32, L3TmCdr16R::Register, L3TmCdr16W::Register>,
    _padding56388: [u8; 1040],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_pll_dig21: Aliased<u32, L3TmPllDig21R::Register, L3TmPllDig21W::Register>,
    _padding57432: [u8; 36],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_pll_dig_31: Aliased<u32, L3TmPllDig31R::Register, L3TmPllDig31W::Register>,
    _padding57472: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_pll_dig_33: Aliased<u32, L3TmPllDig33R::Register, L3TmPllDig33W::Register>,
    _padding57480: [u8; 12],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_pll_dig_37: Aliased<u32, L3TmPllDig37R::Register, L3TmPllDig37W::Register>,
    _padding57496: [u8; 712],
    /// Register value is generated by Vivado PCW.
    pub l3_pll_fbdiv_frac_3_msb:
        Aliased<u32, L3PllFbdivFrac3MsbR::Register, L3PllFbdivFrac3MsbW::Register>,
    _padding58212: [u8; 4],
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_steps_0_lsb:
        Aliased<u32, L3PllSsSteps0LsbR::Register, L3PllSsSteps0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_steps_1_msb:
        Aliased<u32, L3PllSsSteps1MsbR::Register, L3PllSsSteps1MsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_step_size_0_lsb:
        Aliased<u32, L3PllSsStepSize0LsbR::Register, L3PllSsStepSize0LsbW::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_step_size_1:
        Aliased<u32, L3PllSsStepSize1R::Register, L3PllSsStepSize1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_step_size_2:
        Aliased<u32, L3PllSsStepSize2R::Register, L3PllSsStepSize2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_pll_ss_step_size_3_msb:
        Aliased<u32, L3PllSsStepSize3MsbR::Register, L3PllSsStepSize3MsbW::Register>,
    _padding58240: [u8; 100],
    /// Register value is generated by Vivado PCW.
    pub l3_pll_status_read_1: ReadOnly<u32, L3PllStatusRead1::Register>,
    _padding58344: [u8; 2144],
    /// Register value is generated by Vivado PCW.
    pub l3_tm_calib_dig18: Aliased<u32, L3TmCalibDig18R::Register, L3TmCalibDig18W::Register>,
    /// Register value is generated by Vivado PCW.
    pub l3_tm_calib_dig19: Aliased<u32, L3TmCalibDig19R::Register, L3TmCalibDig19W::Register>,
    _padding60496: [u8; 708],
    /// Register value is generated by Vivado PCW.
    pub l3_calib_done_status: ReadOnly<u32, L3CalibDoneStatus::Register>,
    _padding61208: [u8; 4328],
    /// Register value is generated by Vivado PCW.
    pub pll_ref_sel0: Aliased<u32, PllRefSel0R::Register, PllRefSel0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub pll_ref_sel1: Aliased<u32, PllRefSel1R::Register, PllRefSel1W::Register>,
    /// Register value is generated by Vivado PCW.
    pub pll_ref_sel2: Aliased<u32, PllRefSel2R::Register, PllRefSel2W::Register>,
    /// Register value is generated by Vivado PCW.
    pub pll_ref_sel3: Aliased<u32, PllRefSel3R::Register, PllRefSel3W::Register>,
    /// Register value is generated by Vivado PCW.
    pub icm_cfg0: Aliased<u32, IcmCfg0R::Register, IcmCfg0W::Register>,
    /// Register value is generated by Vivado PCW.
    pub icm_cfg1: Aliased<u32, IcmCfg1R::Register, IcmCfg1W::Register>,
    _padding65560: [u8; 40],
    /// Register value is generated by Vivado PCW.
    pub tx_prot_bus_width: Aliased<u32, TxProtBusWidthR::Register, TxProtBusWidthW::Register>,
    /// Register value is generated by Vivado PCW.
    pub rx_prot_bus_width: Aliased<u32, RxProtBusWidthR::Register, RxProtBusWidthW::Register>,
}
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm13R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        RESERVED1 OFFSET(4) NUMBITS(4) [],
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxAnaTm13W [
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED0 OFFSET(1) NUMBITS(1) [],
        RESERVED1 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm15R [
        TX_ANA_TM_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxAnaTm15W [
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm16R [
        TX_ANA_TM_16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP16_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxAnaTm16W [
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm18R [
        TX_ANA_TM_18_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TxAnaTm18W [
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm117R [
        TX_ANA_TM_117_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        MULTILANE_BYP1_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxAnaTm117W [
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxAnaTm118R [
        TX_ANA_TM_118_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP30_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxAnaTm118W [
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxpmaSt0 [
        TXPMA_ST_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TX_PHY_MODE OFFSET(4) NUMBITS(4) [],
        TX_PHY_GEAR OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxpmaSt3 [
        TXPMA_ST_3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_ST3_7_6_SPARE OFFSET(6) NUMBITS(2) [],
        TX_LSEG_DN_RESCAL_CODE OFFSET(0) NUMBITS(6) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxpmaSt4 [
        TXPMA_ST_4_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_ST4_7_6_SPARE OFFSET(6) NUMBITS(2) [],
        TX_USEG_DP_RESCAL_CODE OFFSET(0) NUMBITS(6) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxpmdTm45R [
        TXPMD_TM_45_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_DP_BYP0_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TxpmdTm45W [
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TxpmdTm48R [
        TXPMD_TM_48_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_MISC2_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ],
    pub L0TxpmdTm48W [
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmAnaByp12R [
        TM_ANA_BYP_12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmAnaByp12W [
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmAnaByp15R [
        TM_ANA_BYP_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmAnaByp15W [
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmDig6R [
        TM_DIG_6_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(7) NUMBITS(1) [],
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmDig6W [
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmDig8R [
        TM_DIG_8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmDig8W [
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmDig10R [
        TM_DIG_10_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(4) NUMBITS(4) [],
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ],
    pub L0TmDig10W [
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmDig21R [
        TM_DIG_21_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ],
    pub L0TmDig21W [
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmAux0R [
        TM_AUX_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmAux0W [
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmMisc1R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED1 OFFSET(3) NUMBITS(4) [],
        RESERVED2 OFFSET(2) NUMBITS(1) [],
        RESERVED3 OFFSET(1) NUMBITS(1) [],
        RESERVED4 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmMisc1W [
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED0 OFFSET(3) NUMBITS(4) [],
        RESERVED1 OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmMisc2R [
        TM_MISC2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
        UNUSED OFFSET(0) NUMBITS(2) [],
    ],
    pub L0TmMisc2W [
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIqIll1R [
        TM_IQ_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIqIll1W [
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIqIll2R [
        TM_IQ_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIqIll2W [
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIqIll3R [
        TM_IQ_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIqIll3W [
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIqIll8R [
        TM_IQ_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIqIll8W [
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIqIll9R [
        TM_IQ_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmIqIll9W [
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEIll1R [
        TM_E_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmEIll1W [
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEIll2R [
        TM_E_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmEIll2W [
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEIll3R [
        TM_E_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmEIll3W [
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEIll8R [
        TM_E_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmEIll8W [
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEIll9R [
        TM_E_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmEIll9W [
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEq0R [
        TM_EQ0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ],
    pub L0TmEq0W [
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmEq1R [
        TM_EQ1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ],
    pub L0TmEq1W [
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIll8R [
        TM_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIll8W [
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIll11R [
        TM_ILL11_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ],
    pub L0TmIll11W [
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIll12R [
        TM_ILL12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIll12W [
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmRstDlyR [
        TM_RST_DLY_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmRstDlyW [
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmIll15R [
        TM_ILL15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0TmIll15W [
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmCdr5R [
        TM_CDR5_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L0TmCdr5W [
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmCdr16R [
        TM_CDR16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(5) NUMBITS(3) [],
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L0TmCdr16W [
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0TmPllDig37R [
        TM_PLL_DIG_37_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ],
    pub L0TmPllDig37W [
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllFbdivFrac3MsbR [
        PLL_FBDIV_FRAC_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_FBDIV_FRAC_3_MSV_RSVD OFFSET(7) NUMBITS(1) [],
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB_RSVD OFFSET(3) NUMBITS(2) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L0PllFbdivFrac3MsbW [
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsSteps0LsbR [
        PLL_SS_STEPS_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L0PllSsSteps0LsbW [
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsSteps1MsbR [
        PLL_SS_STEPS_1_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_1_MSB_RSVD OFFSET(3) NUMBITS(5) [],
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L0PllSsSteps1MsbW [
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsStepSize0LsbR [
        PLL_SS_STEP_SIZE_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L0PllSsStepSize0LsbW [
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsStepSize1R [
        PLL_SS_STEP_SIZE_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0PllSsStepSize1W [
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsStepSize2R [
        PLL_SS_STEP_SIZE_2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L0PllSsStepSize2W [
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllSsStepSize3MsbR [
        PLL_SS_STEP_SIZE_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ],
    pub L0PllSsStepSize3MsbW [
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0PllStatusRead1 [
        PLL_STATUS_READ_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_STATUS_READ_1_RSVD OFFSET(6) NUMBITS(2) [],
        PLL_START_LOOP_STATUS_READ OFFSET(5) NUMBITS(1) [],
        PLL_LOCK_STATUS_READ OFFSET(4) NUMBITS(1) [],
        PLL_COARSE_DONE_STATUS_READ OFFSET(3) NUMBITS(1) [],
        PLL_COARSE_CODE_MSB_STATUS_READ OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0L0RefClkSelR [
        L0_REF_CLK_SEL_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L0_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L0_REFCLK_SEL_6_RSVD OFFSET(6) NUMBITS(1) [],
        L0_REFCLK_SEL_5_RSVD OFFSET(5) NUMBITS(1) [],
        L0_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L0_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L0_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L0_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L0_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0L0RefClkSelW [
        L0_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L0_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L0_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L0_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L0_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L0_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0L1RefClkSelR [
        L1_REF_CLK_SEL_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L1_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L1_REFCLK_SEL_6_RSVD OFFSET(6) NUMBITS(1) [],
        L1_REFCLK_SEL_5_RSVD OFFSET(5) NUMBITS(1) [],
        L1_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L1_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L1_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L1_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L1_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0L1RefClkSelW [
        L1_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L1_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L1_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L1_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L1_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L1_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0L2RefClkSelR [
        L2_REF_CLK_SEL_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L2_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L2_REFCLK_SEL_6_RSVD OFFSET(6) NUMBITS(1) [],
        L2_REFCLK_SEL_5_RSVD OFFSET(5) NUMBITS(1) [],
        L2_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L2_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L2_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L2_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L2_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0L2RefClkSelW [
        L2_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L2_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L2_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L2_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L2_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L2_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L0L3RefClkSelR [
        L3_REF_CLK_SEL_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L3_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L3_REFCLK_SEL_6_RSVD OFFSET(6) NUMBITS(1) [],
        L3_REFCLK_SEL_5_RSVD OFFSET(5) NUMBITS(1) [],
        L3_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L3_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L3_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L3_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L3_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L0L3RefClkSelW [
        L3_REF_CLK_LCL_SEL OFFSET(7) NUMBITS(1) [],
        L3_REF_CLK_SEL_4 OFFSET(4) NUMBITS(1) [],
        L3_REF_CLK_SEL_3 OFFSET(3) NUMBITS(1) [],
        L3_REF_CLK_SEL_2 OFFSET(2) NUMBITS(1) [],
        L3_REF_CLK_SEL_1 OFFSET(1) NUMBITS(1) [],
        L3_REF_CLK_SEL_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm13R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        RESERVED1 OFFSET(4) NUMBITS(4) [],
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxAnaTm13W [
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED0 OFFSET(1) NUMBITS(1) [],
        RESERVED1 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm15R [
        TX_ANA_TM_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxAnaTm15W [
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm16R [
        TX_ANA_TM_16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP16_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxAnaTm16W [
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm18R [
        TX_ANA_TM_18_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TxAnaTm18W [
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm117R [
        TX_ANA_TM_117_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        MULTILANE_BYP1_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxAnaTm117W [
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxAnaTm118R [
        TX_ANA_TM_118_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP30_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxAnaTm118W [
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxpmaSt0 [
        TXPMA_ST_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TX_PHY_MODE OFFSET(4) NUMBITS(4) [],
        TX_PHY_GEAR OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxpmaSt4 [
        TXPMA_ST_4_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_ST4_7_6_SPARE OFFSET(6) NUMBITS(2) [],
        TX_USEG_DP_RESCAL_CODE OFFSET(0) NUMBITS(6) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxpmdTm45R [
        TXPMD_TM_45_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_DP_BYP0_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TxpmdTm45W [
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TxpmdTm48R [
        TXPMD_TM_48_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_MISC2_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ],
    pub L1TxpmdTm48W [
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmAnaByp12R [
        TM_ANA_BYP_12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmAnaByp12W [
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmAnaByp15R [
        TM_ANA_BYP_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmAnaByp15W [
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmDig6R [
        TM_DIG_6_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(7) NUMBITS(1) [],
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmDig6W [
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmDig8R [
        TM_DIG_8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmDig8W [
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmDig10R [
        TM_DIG_10_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(4) NUMBITS(4) [],
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ],
    pub L1TmDig10W [
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmDig21R [
        TM_DIG_21_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ],
    pub L1TmDig21W [
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmAux0R [
        TM_AUX_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmAux0W [
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmMisc1R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED1 OFFSET(3) NUMBITS(4) [],
        RESERVED2 OFFSET(2) NUMBITS(1) [],
        RESERVED3 OFFSET(1) NUMBITS(1) [],
        RESERVED4 OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmMisc1W [
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED0 OFFSET(3) NUMBITS(4) [],
        RESERVED1 OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmMisc2R [
        TM_MISC2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
        UNUSED OFFSET(0) NUMBITS(2) [],
    ],
    pub L1TmMisc2W [
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIqIll1R [
        TM_IQ_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIqIll1W [
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIqIll2R [
        TM_IQ_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIqIll2W [
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIqIll3R [
        TM_IQ_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIqIll3W [
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIqIll8R [
        TM_IQ_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIqIll8W [
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIqIll9R [
        TM_IQ_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmIqIll9W [
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEIll1R [
        TM_E_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmEIll1W [
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEIll2R [
        TM_E_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmEIll2W [
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEIll3R [
        TM_E_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmEIll3W [
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEIll8R [
        TM_E_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmEIll8W [
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEIll9R [
        TM_E_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmEIll9W [
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEq0R [
        TM_EQ0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ],
    pub L1TmEq0W [
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmEq1R [
        TM_EQ1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ],
    pub L1TmEq1W [
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIll8R [
        TM_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIll8W [
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIll11R [
        TM_ILL11_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ],
    pub L1TmIll11W [
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIll12R [
        TM_ILL12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIll12W [
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmRstDlyR [
        TM_RST_DLY_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmRstDlyW [
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmIll15R [
        TM_ILL15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1TmIll15W [
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmCdr5R [
        TM_CDR5_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L1TmCdr5W [
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmCdr16R [
        TM_CDR16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(5) NUMBITS(3) [],
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L1TmCdr16W [
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1TmPllDig37R [
        TM_PLL_DIG_37_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ],
    pub L1TmPllDig37W [
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllFbdivFrac3MsbR [
        PLL_FBDIV_FRAC_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_FBDIV_FRAC_3_MSV_RSVD OFFSET(7) NUMBITS(1) [],
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB_RSVD OFFSET(3) NUMBITS(2) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L1PllFbdivFrac3MsbW [
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsSteps0LsbR [
        PLL_SS_STEPS_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L1PllSsSteps0LsbW [
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsSteps1MsbR [
        PLL_SS_STEPS_1_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_1_MSB_RSVD OFFSET(3) NUMBITS(5) [],
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L1PllSsSteps1MsbW [
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsStepSize0LsbR [
        PLL_SS_STEP_SIZE_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L1PllSsStepSize0LsbW [
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsStepSize1R [
        PLL_SS_STEP_SIZE_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1PllSsStepSize1W [
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsStepSize2R [
        PLL_SS_STEP_SIZE_2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L1PllSsStepSize2W [
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllSsStepSize3MsbR [
        PLL_SS_STEP_SIZE_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ],
    pub L1PllSsStepSize3MsbW [
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L1PllStatusRead1 [
        PLL_STATUS_READ_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_STATUS_READ_1_RSVD OFFSET(6) NUMBITS(2) [],
        PLL_START_LOOP_STATUS_READ OFFSET(5) NUMBITS(1) [],
        PLL_LOCK_STATUS_READ OFFSET(4) NUMBITS(1) [],
        PLL_COARSE_DONE_STATUS_READ OFFSET(3) NUMBITS(1) [],
        PLL_COARSE_CODE_MSB_STATUS_READ OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm13R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        RESERVED1 OFFSET(4) NUMBITS(4) [],
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxAnaTm13W [
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED0 OFFSET(1) NUMBITS(1) [],
        RESERVED1 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm15R [
        TX_ANA_TM_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxAnaTm15W [
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm16R [
        TX_ANA_TM_16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP16_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxAnaTm16W [
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm18R [
        TX_ANA_TM_18_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TxAnaTm18W [
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm117R [
        TX_ANA_TM_117_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        MULTILANE_BYP1_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxAnaTm117W [
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxAnaTm118R [
        TX_ANA_TM_118_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP30_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxAnaTm118W [
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxpmaSt0 [
        TXPMA_ST_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TX_PHY_MODE OFFSET(4) NUMBITS(4) [],
        TX_PHY_GEAR OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxpmaSt4 [
        TXPMA_ST_4_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_ST4_7_6_SPARE OFFSET(6) NUMBITS(2) [],
        TX_USEG_DP_RESCAL_CODE OFFSET(0) NUMBITS(6) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxpmdTm45R [
        TXPMD_TM_45_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_DP_BYP0_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TxpmdTm45W [
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TxpmdTm48R [
        TXPMD_TM_48_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_MISC2_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ],
    pub L2TxpmdTm48W [
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmAnaByp12R [
        TM_ANA_BYP_12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmAnaByp12W [
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmAnaByp15R [
        TM_ANA_BYP_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmAnaByp15W [
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmDig6R [
        TM_DIG_6_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(7) NUMBITS(1) [],
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmDig6W [
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmDig8R [
        TM_DIG_8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmDig8W [
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmDig10R [
        TM_DIG_10_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(4) NUMBITS(4) [],
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ],
    pub L2TmDig10W [
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmDig21R [
        TM_DIG_21_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ],
    pub L2TmDig21W [
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmAux0R [
        TM_AUX_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmAux0W [
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmMisc1R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED1 OFFSET(3) NUMBITS(4) [],
        RESERVED2 OFFSET(2) NUMBITS(1) [],
        RESERVED3 OFFSET(1) NUMBITS(1) [],
        RESERVED4 OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmMisc1W [
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED0 OFFSET(3) NUMBITS(4) [],
        RESERVED1 OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmMisc2R [
        TM_MISC2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
        UNUSED OFFSET(0) NUMBITS(2) [],
    ],
    pub L2TmMisc2W [
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIqIll1R [
        TM_IQ_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIqIll1W [
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIqIll2R [
        TM_IQ_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIqIll2W [
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIqIll3R [
        TM_IQ_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIqIll3W [
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIqIll8R [
        TM_IQ_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIqIll8W [
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIqIll9R [
        TM_IQ_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmIqIll9W [
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEIll1R [
        TM_E_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmEIll1W [
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEIll2R [
        TM_E_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmEIll2W [
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEIll3R [
        TM_E_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmEIll3W [
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEIll8R [
        TM_E_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmEIll8W [
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEIll9R [
        TM_E_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmEIll9W [
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEq0R [
        TM_EQ0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ],
    pub L2TmEq0W [
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmEq1R [
        TM_EQ1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ],
    pub L2TmEq1W [
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIll8R [
        TM_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIll8W [
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIll11R [
        TM_ILL11_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ],
    pub L2TmIll11W [
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIll12R [
        TM_ILL12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIll12W [
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmRstDlyR [
        TM_RST_DLY_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmRstDlyW [
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmIll15R [
        TM_ILL15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2TmIll15W [
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmCdr5R [
        TM_CDR5_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L2TmCdr5W [
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmCdr16R [
        TM_CDR16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(5) NUMBITS(3) [],
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L2TmCdr16W [
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2TmPllDig37R [
        TM_PLL_DIG_37_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ],
    pub L2TmPllDig37W [
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllFbdivFrac3MsbR [
        PLL_FBDIV_FRAC_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_FBDIV_FRAC_3_MSV_RSVD OFFSET(7) NUMBITS(1) [],
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB_RSVD OFFSET(3) NUMBITS(2) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L2PllFbdivFrac3MsbW [
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsSteps0LsbR [
        PLL_SS_STEPS_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L2PllSsSteps0LsbW [
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsSteps1MsbR [
        PLL_SS_STEPS_1_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_1_MSB_RSVD OFFSET(3) NUMBITS(5) [],
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L2PllSsSteps1MsbW [
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsStepSize0LsbR [
        PLL_SS_STEP_SIZE_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L2PllSsStepSize0LsbW [
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsStepSize1R [
        PLL_SS_STEP_SIZE_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2PllSsStepSize1W [
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsStepSize2R [
        PLL_SS_STEP_SIZE_2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L2PllSsStepSize2W [
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllSsStepSize3MsbR [
        PLL_SS_STEP_SIZE_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ],
    pub L2PllSsStepSize3MsbW [
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L2PllStatusRead1 [
        PLL_STATUS_READ_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_STATUS_READ_1_RSVD OFFSET(6) NUMBITS(2) [],
        PLL_START_LOOP_STATUS_READ OFFSET(5) NUMBITS(1) [],
        PLL_LOCK_STATUS_READ OFFSET(4) NUMBITS(1) [],
        PLL_COARSE_DONE_STATUS_READ OFFSET(3) NUMBITS(1) [],
        PLL_COARSE_CODE_MSB_STATUS_READ OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm13R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        RESERVED1 OFFSET(4) NUMBITS(4) [],
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxAnaTm13W [
        TX_SWAP_POLARITY OFFSET(3) NUMBITS(1) [],
        FORCE_TX_SWAP_POLARITY OFFSET(2) NUMBITS(1) [],
        RESERVED0 OFFSET(1) NUMBITS(1) [],
        RESERVED1 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm15R [
        TX_ANA_TM_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxAnaTm15W [
        PIPE_TX_SWING OFFSET(7) NUMBITS(1) [],
        FORCE_PIPE_TX_SWING OFFSET(6) NUMBITS(1) [],
        PIPE_TX_RXDET_DISCHARGE OFFSET(5) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_DISCHARGE OFFSET(4) NUMBITS(1) [],
        PIPE_TX_RXDET_CHARGE OFFSET(3) NUMBITS(1) [],
        FORCE_PIPE_TX_RXDET_CHARGE OFFSET(2) NUMBITS(1) [],
        PIPE_TX_ENABLE_RXDET OFFSET(1) NUMBITS(1) [],
        FORCE_PIPE_TX_ENABLE_RXDET OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm16R [
        TX_ANA_TM_16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP16_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxAnaTm16W [
        PIPE_TX_MARGIN OFFSET(1) NUMBITS(3) [],
        FORCE_PIPE_TX_MARGIN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm18R [
        TX_ANA_TM_18_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TxAnaTm18W [
        PIPE_TX_DEEMPH_7_0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm117R [
        TX_ANA_TM_117_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        MULTILANE_BYP1_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxAnaTm117W [
        TX_PCIE_4X_CFG_EN OFFSET(5) NUMBITS(1) [],
        FORCE_TX_PCIE_4X_CFG_EN OFFSET(4) NUMBITS(1) [],
        TX_PCIE_2X_CFG_EN OFFSET(3) NUMBITS(1) [],
        FORCE_TX_PCIE_2X_CFG_EN OFFSET(2) NUMBITS(1) [],
        TX_DP_MULTILANE_CFG_EN OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DP_MULTILANE_CFG_EN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxAnaTm118R [
        TX_ANA_TM_118_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_BYP30_7_4_RSVD OFFSET(4) NUMBITS(4) [],
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxAnaTm118W [
        FORCE_TX_DEEMPH_17_12 OFFSET(3) NUMBITS(1) [],
        FORCE_TX_DEEMPH_11_6 OFFSET(2) NUMBITS(1) [],
        FORCE_TX_DEEMPH_5_0 OFFSET(1) NUMBITS(1) [],
        FORCE_TX_DEEMPH_17_0 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxpmaSt0 [
        TXPMA_ST_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TX_PHY_MODE OFFSET(4) NUMBITS(4) [],
        TX_PHY_GEAR OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxpmaSt4 [
        TXPMA_ST_4_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_ST4_7_6_SPARE OFFSET(6) NUMBITS(2) [],
        TX_USEG_DP_RESCAL_CODE OFFSET(0) NUMBITS(6) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxpmdTm45R [
        TXPMD_TM_45_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_DP_BYP0_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TxpmdTm45W [
        DP_TM_TX_DP_ENABLE_POST2_PATH OFFSET(5) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST2_PATH OFFSET(4) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_POST1_PATH OFFSET(3) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_POST1_PATH OFFSET(2) NUMBITS(1) [],
        DP_TM_TX_DP_ENABLE_MAIN_PATH OFFSET(1) NUMBITS(1) [],
        DP_TM_TX_OVRD_DP_ENABLE_MAIN_PATH OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TxpmdTm48R [
        TXPMD_TM_48_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ANA_MISC2_7_6_RSVD OFFSET(6) NUMBITS(2) [],
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ],
    pub L3TxpmdTm48W [
        TM_FORCE_RESULTANT_MARGINING_FACTOR OFFSET(5) NUMBITS(1) [],
        TM_RESULTANT_MARGINING_FACTOR OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmAnaByp12R [
        TM_ANA_BYP_12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmAnaByp12W [
        UPHY_PSO_HSRXDIG OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_PSO_HSRXDIG OFFSET(6) NUMBITS(1) [],
        UPHY_PDN_HS_DES OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PDN_HS_DES OFFSET(4) NUMBITS(1) [],
        UPHY_RST_GF_MUX OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_RST_GF_MUX OFFSET(2) NUMBITS(1) [],
        UPHY_ENABLE_CDR OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_CDR OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmAnaByp15R [
        TM_ANA_BYP_15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmAnaByp15W [
        UPHY_ENABLE_LOW_LEAKAGE OFFSET(7) NUMBITS(1) [],
        FORCE_UPHY_ENABLE_LOW_LEAKAGE OFFSET(6) NUMBITS(1) [],
        UPHY_PD_SAMP_C2C OFFSET(5) NUMBITS(1) [],
        FORCE_UPHY_PD_SAMP_C2C OFFSET(4) NUMBITS(1) [],
        UPHY_PSO_CORE_EQ OFFSET(3) NUMBITS(1) [],
        FORCE_UPHY_PSO_CORE_EQ OFFSET(2) NUMBITS(1) [],
        UPHY_PSO_IO_EQ OFFSET(1) NUMBITS(1) [],
        FORCE_UPHY_PSO_IO_EQ OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmDig6R [
        TM_DIG_6_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(7) NUMBITS(1) [],
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmDig6W [
        FORCE_BYPASS_ON_ERR OFFSET(6) NUMBITS(1) [],
        SUPPRESS_ERR OFFSET(5) NUMBITS(1) [],
        BYPASS_OHC OFFSET(4) NUMBITS(1) [],
        BYPASS_DECODER OFFSET(3) NUMBITS(1) [],
        FORCE_BYPASS_DEC OFFSET(2) NUMBITS(1) [],
        BYPASS_DESCRAM OFFSET(1) NUMBITS(1) [],
        FORCE_BYPASS_DESCRAM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmDig8R [
        TM_DIG_8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmDig8W [
        EYESURF_ENABLE OFFSET(4) NUMBITS(1) [],
        USE_EB_IN_MPHY OFFSET(3) NUMBITS(1) [],
        BYPASS_EB OFFSET(2) NUMBITS(1) [],
        EB_MODE OFFSET(1) NUMBITS(1) [],
        FORCE_EB_MODE OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmDig10R [
        TM_DIG_10_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(4) NUMBITS(4) [],
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ],
    pub L3TmDig10W [
        CDR_BIT_LOCK_TIME OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmDig21R [
        TM_DIG_21_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        RESERVED0 OFFSET(5) NUMBITS(3) [],
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ],
    pub L3TmDig21W [
        COMMA_LOCATION_RST OFFSET(4) NUMBITS(1) [],
        SSC_WAIT_CNT OFFSET(2) NUMBITS(2) [],
        COMMA_PRE_LOCK_THRESH OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmAux0R [
        TM_AUX_0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmAux0W [
        BIT_0 OFFSET(7) NUMBITS(1) [],
        BIT_1 OFFSET(6) NUMBITS(1) [],
        BIT_2 OFFSET(5) NUMBITS(1) [],
        BIT_3 OFFSET(4) NUMBITS(1) [],
        BIT_4 OFFSET(3) NUMBITS(1) [],
        BIT_5 OFFSET(2) NUMBITS(1) [],
        BIT_6 OFFSET(1) NUMBITS(1) [],
        BIT_7 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmMisc1R [
        RESERVED0 OFFSET(8) NUMBITS(24) [],
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED1 OFFSET(3) NUMBITS(4) [],
        RESERVED2 OFFSET(2) NUMBITS(1) [],
        RESERVED3 OFFSET(1) NUMBITS(1) [],
        RESERVED4 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmMisc1W [
        HSRX_POLARITY_FLIP OFFSET(7) NUMBITS(1) [],
        RESERVED0 OFFSET(3) NUMBITS(4) [],
        RESERVED1 OFFSET(2) NUMBITS(1) [],
        RESERVED2 OFFSET(1) NUMBITS(1) [],
        RESERVED3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmMisc2R [
        TM_MISC2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
        UNUSED OFFSET(0) NUMBITS(2) [],
    ],
    pub L3TmMisc2W [
        ILL_CAL_BYPASS_COUNTS OFFSET(7) NUMBITS(1) [],
        PWR_SEQ_SAMP_CAL_ALWAYS OFFSET(6) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE OFFSET(5) NUMBITS(1) [],
        PWR_SEQ_BYP_CAL_DONE_VAL OFFSET(4) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ OFFSET(3) NUMBITS(1) [],
        SAMP_BYPASS_CAL_TO_EQ_VAL OFFSET(2) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIqIll1R [
        TM_IQ_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIqIll1W [
        ILL_BYPASS_IQ_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIqIll2R [
        TM_IQ_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIqIll2W [
        ILL_BYPASS_IQ_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIqIll3R [
        TM_IQ_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIqIll3W [
        ILL_BYPASS_IQ_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIqIll8R [
        TM_IQ_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIqIll8W [
        ILL_BYPASS_IQ_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIqIll9R [
        TM_IQ_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmIqIll9W [
        ILL_BYPASS_IQ_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_IQ_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_IQ_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_IQ_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEIll1R [
        TM_E_ILL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmEIll1W [
        ILL_BYPASS_E_CALCODE_F0 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEIll2R [
        TM_E_ILL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmEIll2W [
        ILL_BYPASS_E_CALCODE_F1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEIll3R [
        TM_E_ILL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmEIll3W [
        ILL_BYPASS_E_CALCODE_F2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEIll8R [
        TM_E_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmEIll8W [
        ILL_BYPASS_E_POLYTRIM_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEIll9R [
        TM_E_ILL9_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(4) NUMBITS(4) [],
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmEIll9W [
        ILL_BYPASS_E_LFEN OFFSET(3) NUMBITS(1) [],
        ILL_BYPASS_E_LFEN_VAL OFFSET(2) NUMBITS(1) [],
        ILL_BYPASS_E_CNSTGMTRIM OFFSET(1) NUMBITS(1) [],
        ILL_BYPASS_E_POLYTIM OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEq0R [
        TM_EQ0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ],
    pub L3TmEq0W [
        EQ_STG1_RL_PROG_MSB OFFSET(7) NUMBITS(1) [],
        EQ_STG1_CTRL_BYP OFFSET(6) NUMBITS(1) [],
        EQ_STG2_CTRL_BYP OFFSET(5) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE OFFSET(4) NUMBITS(1) [],
        EQ_ADAPTATION_FORCE_VAL OFFSET(3) NUMBITS(1) [],
        EQ_ISOURCE_EN_VAL OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmEq1R [
        TM_EQ1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ],
    pub L3TmEq1W [
        EQ_STG1_PREAMP_MODE_VAL OFFSET(7) NUMBITS(1) [],
        EQ_STG1_RL_PROG OFFSET(5) NUMBITS(2) [],
        EQ_STG2_CM_PROG OFFSET(3) NUMBITS(2) [],
        EQ_STG2_PREAMP_MODE_VAL OFFSET(2) NUMBITS(1) [],
        EQ_STG2_RL_PROG OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIll8R [
        TM_ILL8_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIll8W [
        ILL_CAL_ITER_WAIT OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIll11R [
        TM_ILL11_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ],
    pub L3TmIll11W [
        G2A_PCIEG1_PLL_CTR_11_8_BYP_VAL OFFSET(4) NUMBITS(4) [],
        G2B_PLL_CTR_11_8_BYP_VAL OFFSET(0) NUMBITS(4) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIll12R [
        TM_ILL12_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIll12W [
        G1A_PLL_CTR_BYP_VAL OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmRstDlyR [
        TM_RST_DLY_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmRstDlyW [
        APB_RST_DLY OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmIll15R [
        TM_ILL15_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3TmIll15W [
        ILL_CAL_REF_CTR_MSB_REG1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmCdr5R [
        TM_CDR5_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L3TmCdr5W [
        FPHL_FSM_ACC_CYCLES OFFSET(5) NUMBITS(3) [],
        FFL_PH0_INT_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmCdr16R [
        TM_CDR16_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        UNUSED OFFSET(5) NUMBITS(3) [],
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ],
    pub L3TmCdr16W [
        FFL_PH0_PROP_GAIN OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmPllDig21R [
        TM_PLL_DIG21_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_EN_PLL_LDO_0P9_REF OFFSET(7) NUMBITS(1) [],
        ANA_TM_EN_PLL_0P9_FORCE_SW OFFSET(6) NUMBITS(1) [],
        TM_PLL_PD_OPDIV_SYM OFFSET(5) NUMBITS(1) [],
        TM_FORCE_PLL_PD_OPDIV_SYM OFFSET(4) NUMBITS(1) [],
        TM_PLL_RSVD_1 OFFSET(3) NUMBITS(1) [],
        TM_PLL_RSVD_2 OFFSET(2) NUMBITS(1) [],
        TM_PLL_EN OFFSET(1) NUMBITS(1) [],
        TM_FORCE_PLL_EN OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmPllDig21W [
        TM_FORCE_EN_PLL_LDO_0P9_REF OFFSET(7) NUMBITS(1) [],
        ANA_TM_EN_PLL_0P9_FORCE_SW OFFSET(6) NUMBITS(1) [],
        TM_PLL_PD_OPDIV_SYM OFFSET(5) NUMBITS(1) [],
        TM_FORCE_PLL_PD_OPDIV_SYM OFFSET(4) NUMBITS(1) [],
        TM_PLL_EN OFFSET(1) NUMBITS(1) [],
        TM_FORCE_PLL_EN OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmPllDig31R [
        TM_PLL_DIG_31_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_CLKDIST_ENABLE_MASTER_CLK_DRIVE OFFSET(7) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_MASTER_CLK_DRIVE OFFSET(6) NUMBITS(1) [],
        TM_CLKDIST_ENABLE_LANE_RST_DRIVE OFFSET(5) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_LANE_RST_DRIVE OFFSET(4) NUMBITS(1) [],
        TM_CLKDIST_ENABLE_LANE_CLK_DRIVE OFFSET(3) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_LANE_CLK_DRIVE OFFSET(2) NUMBITS(1) [],
        TM_CLKDIST_BIAS_RATE_SEL OFFSET(1) NUMBITS(1) [],
        TM_FORCE_CLKDIST_BIAS_RATE_SEL OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmPllDig31W [
        TM_CLKDIST_ENABLE_MASTER_CLK_DRIVE OFFSET(7) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_MASTER_CLK_DRIVE OFFSET(6) NUMBITS(1) [],
        TM_CLKDIST_ENABLE_LANE_RST_DRIVE OFFSET(5) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_LANE_RST_DRIVE OFFSET(4) NUMBITS(1) [],
        TM_CLKDIST_ENABLE_LANE_CLK_DRIVE OFFSET(3) NUMBITS(1) [],
        TM_FORCE_CLKDIST_ENABLE_LANE_CLK_DRIVE OFFSET(2) NUMBITS(1) [],
        TM_CLKDIST_BIAS_RATE_SEL OFFSET(1) NUMBITS(1) [],
        TM_FORCE_CLKDIST_BIAS_RATE_SEL OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmPllDig33R [
        TM_PLL_DIG_33_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_TX_CLK_RST_REL OFFSET(7) NUMBITS(1) [],
        TM_TX_CLK_RST_REL OFFSET(6) NUMBITS(1) [],
        TM_CLKDIST_MUX_XCVR_MASTER_RST_EN OFFSET(5) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_XCVR_MASTER_RST_EN OFFSET(4) NUMBITS(1) [],
        TM_CLKDIST_MUX_MASTER_CLK_SEL OFFSET(3) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_MASTER_CLK_SEL OFFSET(2) NUMBITS(1) [],
        TM_CLKDIST_MUX_LOCAL_CLK_SEL OFFSET(1) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_LOCAL_CLK_SEL OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmPllDig33W [
        TM_FORCE_TX_CLK_RST_REL OFFSET(7) NUMBITS(1) [],
        TM_TX_CLK_RST_REL OFFSET(6) NUMBITS(1) [],
        TM_CLKDIST_MUX_XCVR_MASTER_RST_EN OFFSET(5) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_XCVR_MASTER_RST_EN OFFSET(4) NUMBITS(1) [],
        TM_CLKDIST_MUX_MASTER_CLK_SEL OFFSET(3) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_MASTER_CLK_SEL OFFSET(2) NUMBITS(1) [],
        TM_CLKDIST_MUX_LOCAL_CLK_SEL OFFSET(1) NUMBITS(1) [],
        TM_FORCE_CLKDIST_MUX_LOCAL_CLK_SEL OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmPllDig37R [
        TM_PLL_DIG_37_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmPllDig37W [
        TM_COARSE_CODE_SAT_VALUE_LSB OFFSET(5) NUMBITS(3) [],
        TM_ENABLE_COARSE_SATURATION OFFSET(4) NUMBITS(1) [],
        W_SPARE_OUTPUTS OFFSET(2) NUMBITS(2) [],
        TM_FORCE_EN_IP_DIV_BYPASS OFFSET(1) NUMBITS(1) [],
        TM_EN_IP_DIV_BYPASS OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllFbdivFrac3MsbR [
        PLL_FBDIV_FRAC_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_FBDIV_FRAC_3_MSV_RSVD OFFSET(7) NUMBITS(1) [],
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB_RSVD OFFSET(3) NUMBITS(2) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L3PllFbdivFrac3MsbW [
        TM_FORCE_EN_FRAC OFFSET(6) NUMBITS(1) [],
        TM_EN_FRAC OFFSET(5) NUMBITS(1) [],
        FBDIV_FRAC_3_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsSteps0LsbR [
        PLL_SS_STEPS_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L3PllSsSteps0LsbW [
        SS_NUM_OF_STEPS_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsSteps1MsbR [
        PLL_SS_STEPS_1_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_NUM_OF_STEPS_1_MSB_RSVD OFFSET(3) NUMBITS(5) [],
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ],
    pub L3PllSsSteps1MsbW [
        SS_NUM_OF_STEPS_1_MSB OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsStepSize0LsbR [
        PLL_SS_STEP_SIZE_0_LSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ],
    pub L3PllSsStepSize0LsbW [
        SS_STEP_SIZE_0_LSB OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsStepSize1R [
        PLL_SS_STEP_SIZE_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3PllSsStepSize1W [
        SS_STEP_SIZE_1 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsStepSize2R [
        PLL_SS_STEP_SIZE_2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ],
    pub L3PllSsStepSize2W [
        SS_STEP_SIZE_2 OFFSET(0) NUMBITS(8) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllSsStepSize3MsbR [
        PLL_SS_STEP_SIZE_3_MSB_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ],
    pub L3PllSsStepSize3MsbW [
        TM_FORCE_EN_SS OFFSET(7) NUMBITS(1) [],
        TM_EN_SS OFFSET(6) NUMBITS(1) [],
        FORCE_SS_NUM_OF_STEPS OFFSET(5) NUMBITS(1) [],
        FORCE_SS_STEP_SIZE OFFSET(4) NUMBITS(1) [],
        SS_SPREAD_TYPE OFFSET(2) NUMBITS(2) [],
        SS_STEP_SIZE_3_MSB OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3PllStatusRead1 [
        PLL_STATUS_READ_1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_STATUS_READ_1_RSVD OFFSET(6) NUMBITS(2) [],
        PLL_START_LOOP_STATUS_READ OFFSET(5) NUMBITS(1) [],
        PLL_LOCK_STATUS_READ OFFSET(4) NUMBITS(1) [],
        PLL_COARSE_DONE_STATUS_READ OFFSET(3) NUMBITS(1) [],
        PLL_COARSE_CODE_MSB_STATUS_READ OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmCalibDig18R [
        TM_CALIB_DIG18_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_NSW_CODE_OR_2 OFFSET(7) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_1 OFFSET(6) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_0 OFFSET(5) NUMBITS(1) [],
        TM_OR_PIPE_NSW_CODE OFFSET(4) NUMBITS(1) [],
        FORCE_EN_PIPE_NSW OFFSET(3) NUMBITS(1) [],
        TM_OR_EN_PIPE_NSW OFFSET(2) NUMBITS(1) [],
        USB2_CODE_OR_4 OFFSET(1) NUMBITS(1) [],
        USB2_CODE_OR_3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmCalibDig18W [
        PIPE_NSW_CODE_OR_2 OFFSET(7) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_1 OFFSET(6) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_0 OFFSET(5) NUMBITS(1) [],
        TM_OR_PIPE_NSW_CODE OFFSET(4) NUMBITS(1) [],
        FORCE_EN_PIPE_NSW OFFSET(3) NUMBITS(1) [],
        TM_OR_EN_PIPE_NSW OFFSET(2) NUMBITS(1) [],
        USB2_CODE_OR_4 OFFSET(1) NUMBITS(1) [],
        USB2_CODE_OR_3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3TmCalibDig19R [
        TM_CALIB_DIG19_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PIPE_PSW_CODE_OR_1 OFFSET(7) NUMBITS(1) [],
        PIPE_PSW_CODE_OR_0 OFFSET(6) NUMBITS(1) [],
        TM_OR_PIPE_PSW_CODE OFFSET(5) NUMBITS(1) [],
        FORCE_EN_PIPE_PSW OFFSET(4) NUMBITS(1) [],
        TM_OR_EN_PIPE_PSW OFFSET(3) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_5 OFFSET(2) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_4 OFFSET(1) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_3 OFFSET(0) NUMBITS(1) [],
    ],
    pub L3TmCalibDig19W [
        PIPE_PSW_CODE_OR_1 OFFSET(7) NUMBITS(1) [],
        PIPE_PSW_CODE_OR_0 OFFSET(6) NUMBITS(1) [],
        TM_OR_PIPE_PSW_CODE OFFSET(5) NUMBITS(1) [],
        FORCE_EN_PIPE_PSW OFFSET(4) NUMBITS(1) [],
        TM_OR_EN_PIPE_PSW OFFSET(3) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_5 OFFSET(2) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_4 OFFSET(1) NUMBITS(1) [],
        PIPE_NSW_CODE_OR_3 OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub L3CalibDoneStatus [
        CALIB_DONE_STATUS_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        CALIB_DONE_STATUS_2_7_RSVD OFFSET(2) NUMBITS(6) [],
        CALIB_DONE_STATUS OFFSET(1) NUMBITS(1) [],
        CALIB_COMP_OUT_STATUS OFFSET(0) NUMBITS(1) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub PllRefSel0R [
        PLL_REF_SEL0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_REF_SEL0_7_RSVD OFFSET(7) NUMBITS(1) [],
        PLL_REF_SEL0_6_RSVD OFFSET(6) NUMBITS(1) [],
        PLL_REF_SEL0_5_RSVD OFFSET(5) NUMBITS(1) [],
        PLLREFSEL0 OFFSET(0) NUMBITS(5) [],
    ],
    pub PllRefSel0W [
        PLLREFSEL0 OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub PllRefSel1R [
        PLL_REF_SEL1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_REF_SEL0_7_RSVD OFFSET(7) NUMBITS(1) [],
        PLL_REF_SEL0_6_RSVD OFFSET(6) NUMBITS(1) [],
        PLL_REF_SEL0_5_RSVD OFFSET(5) NUMBITS(1) [],
        PLLREFSEL1 OFFSET(0) NUMBITS(5) [],
    ],
    pub PllRefSel1W [
        PLLREFSEL1 OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub PllRefSel2R [
        PLL_REF_SEL2_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_REF_SEL0_7_RSVD OFFSET(7) NUMBITS(1) [],
        PLL_REF_SEL0_6_RSVD OFFSET(6) NUMBITS(1) [],
        PLL_REF_SEL0_5_RSVD OFFSET(5) NUMBITS(1) [],
        PLLREFSEL2 OFFSET(0) NUMBITS(5) [],
    ],
    pub PllRefSel2W [
        PLLREFSEL2 OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub PllRefSel3R [
        PLL_REF_SEL3_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        PLL_REF_SEL0_7_RSVD OFFSET(7) NUMBITS(1) [],
        PLL_REF_SEL0_6_RSVD OFFSET(6) NUMBITS(1) [],
        PLL_REF_SEL0_5_RSVD OFFSET(5) NUMBITS(1) [],
        PLLREFSEL3 OFFSET(0) NUMBITS(5) [],
    ],
    pub PllRefSel3W [
        PLLREFSEL3 OFFSET(0) NUMBITS(5) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub IcmCfg0R [
        ICM_CFG0_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ICM_CFG0_7_RSVD OFFSET(7) NUMBITS(1) [],
        L1_ICM_CFG OFFSET(4) NUMBITS(3) [],
        ICM_CFG0_3_RSVD OFFSET(3) NUMBITS(1) [],
        L0_ICM_CFG OFFSET(0) NUMBITS(3) [],
    ],
    pub IcmCfg0W [
        L1_ICM_CFG OFFSET(4) NUMBITS(3) [],
        L0_ICM_CFG OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub IcmCfg1R [
        ICM_CFG1_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        ICM_CFG1_7_RSVD OFFSET(7) NUMBITS(1) [],
        L3_ICM_CFG OFFSET(4) NUMBITS(3) [],
        ICM_CFG1_3_RSVD OFFSET(3) NUMBITS(1) [],
        L2_ICM_CFG OFFSET(0) NUMBITS(3) [],
    ],
    pub IcmCfg1W [
        L3_ICM_CFG OFFSET(4) NUMBITS(3) [],
        L2_ICM_CFG OFFSET(0) NUMBITS(3) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub TxProtBusWidthR [
        TX_PROT_BUS_WIDTH_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L3_TX_PROT_BUSWIDTH OFFSET(6) NUMBITS(2) [],
        L2_TX_PROT_BUSWIDTH OFFSET(4) NUMBITS(2) [],
        L1_TX_PROT_BUSWIDTH OFFSET(2) NUMBITS(2) [],
        L0_TX_PROT_BUSWIDTH OFFSET(0) NUMBITS(2) [],
    ],
    pub TxProtBusWidthW [
        L3_TX_PROT_BUSWIDTH OFFSET(6) NUMBITS(2) [],
        L2_TX_PROT_BUSWIDTH OFFSET(4) NUMBITS(2) [],
        L1_TX_PROT_BUSWIDTH OFFSET(2) NUMBITS(2) [],
        L0_TX_PROT_BUSWIDTH OFFSET(0) NUMBITS(2) [],
    ]
];
tock_registers::register_bitfields! [
    u32,
    pub RxProtBusWidthR [
        RX_PROT_BUS_WIDTH_31_8_RSVD OFFSET(8) NUMBITS(24) [],
        L3_RX_PROT_BUSWIDTH OFFSET(6) NUMBITS(2) [],
        L2_RX_PROT_BUSWIDTH OFFSET(4) NUMBITS(2) [],
        L1_RX_PROT_BUSWIDTH OFFSET(2) NUMBITS(2) [],
        L0_RX_PROT_BUSWIDTH OFFSET(0) NUMBITS(2) [],
    ],
    pub RxProtBusWidthW [
        L3_RX_PROT_BUSWIDTH OFFSET(6) NUMBITS(2) [],
        L2_RX_PROT_BUSWIDTH OFFSET(4) NUMBITS(2) [],
        L1_RX_PROT_BUSWIDTH OFFSET(2) NUMBITS(2) [],
        L0_RX_PROT_BUSWIDTH OFFSET(0) NUMBITS(2) [],
    ]
];
